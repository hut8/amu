// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/hut8/amu/ent/mailbox"
	"github.com/hut8/amu/ent/message"
)

// Message is the model entity for the Message schema.
type Message struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// MessageID holds the value of the "message_id" field.
	MessageID string `json:"message_id,omitempty"`
	// ImapUID holds the value of the "imap_uid" field.
	ImapUID *uint32 `json:"imap_uid,omitempty"`
	// Header holds the value of the "header" field.
	Header *string `json:"header,omitempty"`
	// Body holds the value of the "body" field.
	Body *string `json:"body,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MessageQuery when eager-loading is set.
	Edges            MessageEdges `json:"edges"`
	mailbox_messages *int
}

// MessageEdges holds the relations/edges for other nodes in the graph.
type MessageEdges struct {
	// Mailbox holds the value of the mailbox edge.
	Mailbox *Mailbox `json:"mailbox,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MailboxOrErr returns the Mailbox value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) MailboxOrErr() (*Mailbox, error) {
	if e.loadedTypes[0] {
		if e.Mailbox == nil {
			// The edge mailbox was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: mailbox.Label}
		}
		return e.Mailbox, nil
	}
	return nil, &NotLoadedError{edge: "mailbox"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Message) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case message.FieldID, message.FieldImapUID:
			values[i] = new(sql.NullInt64)
		case message.FieldMessageID, message.FieldHeader, message.FieldBody:
			values[i] = new(sql.NullString)
		case message.ForeignKeys[0]: // mailbox_messages
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Message", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Message fields.
func (m *Message) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case message.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case message.FieldMessageID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message_id", values[i])
			} else if value.Valid {
				m.MessageID = value.String
			}
		case message.FieldImapUID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field imap_uid", values[i])
			} else if value.Valid {
				m.ImapUID = new(uint32)
				*m.ImapUID = uint32(value.Int64)
			}
		case message.FieldHeader:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field header", values[i])
			} else if value.Valid {
				m.Header = new(string)
				*m.Header = value.String
			}
		case message.FieldBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value.Valid {
				m.Body = new(string)
				*m.Body = value.String
			}
		case message.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field mailbox_messages", value)
			} else if value.Valid {
				m.mailbox_messages = new(int)
				*m.mailbox_messages = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryMailbox queries the "mailbox" edge of the Message entity.
func (m *Message) QueryMailbox() *MailboxQuery {
	return (&MessageClient{config: m.config}).QueryMailbox(m)
}

// Update returns a builder for updating this Message.
// Note that you need to call Message.Unwrap() before calling this method if this Message
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Message) Update() *MessageUpdateOne {
	return (&MessageClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Message entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Message) Unwrap() *Message {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Message is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Message) String() string {
	var builder strings.Builder
	builder.WriteString("Message(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", message_id=")
	builder.WriteString(m.MessageID)
	if v := m.ImapUID; v != nil {
		builder.WriteString(", imap_uid=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := m.Header; v != nil {
		builder.WriteString(", header=")
		builder.WriteString(*v)
	}
	if v := m.Body; v != nil {
		builder.WriteString(", body=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Messages is a parsable slice of Message.
type Messages []*Message

func (m Messages) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
