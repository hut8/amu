// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hut8/amu/ent/account"
	"github.com/hut8/amu/ent/mailbox"
	"github.com/hut8/amu/ent/message"
	"github.com/hut8/amu/ent/predicate"
)

// MailboxUpdate is the builder for updating Mailbox entities.
type MailboxUpdate struct {
	config
	hooks    []Hook
	mutation *MailboxMutation
}

// Where appends a list predicates to the MailboxUpdate builder.
func (mu *MailboxUpdate) Where(ps ...predicate.Mailbox) *MailboxUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetName sets the "name" field.
func (mu *MailboxUpdate) SetName(s string) *MailboxUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (mu *MailboxUpdate) SetAccountID(id int) *MailboxUpdate {
	mu.mutation.SetAccountID(id)
	return mu
}

// SetAccount sets the "account" edge to the Account entity.
func (mu *MailboxUpdate) SetAccount(a *Account) *MailboxUpdate {
	return mu.SetAccountID(a.ID)
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (mu *MailboxUpdate) AddMessageIDs(ids ...int) *MailboxUpdate {
	mu.mutation.AddMessageIDs(ids...)
	return mu
}

// AddMessages adds the "messages" edges to the Message entity.
func (mu *MailboxUpdate) AddMessages(m ...*Message) *MailboxUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddMessageIDs(ids...)
}

// Mutation returns the MailboxMutation object of the builder.
func (mu *MailboxUpdate) Mutation() *MailboxMutation {
	return mu.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (mu *MailboxUpdate) ClearAccount() *MailboxUpdate {
	mu.mutation.ClearAccount()
	return mu
}

// ClearMessages clears all "messages" edges to the Message entity.
func (mu *MailboxUpdate) ClearMessages() *MailboxUpdate {
	mu.mutation.ClearMessages()
	return mu
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (mu *MailboxUpdate) RemoveMessageIDs(ids ...int) *MailboxUpdate {
	mu.mutation.RemoveMessageIDs(ids...)
	return mu
}

// RemoveMessages removes "messages" edges to Message entities.
func (mu *MailboxUpdate) RemoveMessages(m ...*Message) *MailboxUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveMessageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MailboxUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mu.hooks) == 0 {
		if err = mu.check(); err != nil {
			return 0, err
		}
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MailboxMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mu.check(); err != nil {
				return 0, err
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			if mu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MailboxUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MailboxUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MailboxUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MailboxUpdate) check() error {
	if _, ok := mu.mutation.AccountID(); mu.mutation.AccountCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Mailbox.account"`)
	}
	return nil
}

func (mu *MailboxUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mailbox.Table,
			Columns: mailbox.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: mailbox.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mailbox.FieldName,
		})
	}
	if mu.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mailbox.AccountTable,
			Columns: []string{mailbox.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: account.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mailbox.AccountTable,
			Columns: []string{mailbox.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mailbox.MessagesTable,
			Columns: []string{mailbox.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !mu.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mailbox.MessagesTable,
			Columns: []string{mailbox.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mailbox.MessagesTable,
			Columns: []string{mailbox.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mailbox.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// MailboxUpdateOne is the builder for updating a single Mailbox entity.
type MailboxUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MailboxMutation
}

// SetName sets the "name" field.
func (muo *MailboxUpdateOne) SetName(s string) *MailboxUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (muo *MailboxUpdateOne) SetAccountID(id int) *MailboxUpdateOne {
	muo.mutation.SetAccountID(id)
	return muo
}

// SetAccount sets the "account" edge to the Account entity.
func (muo *MailboxUpdateOne) SetAccount(a *Account) *MailboxUpdateOne {
	return muo.SetAccountID(a.ID)
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (muo *MailboxUpdateOne) AddMessageIDs(ids ...int) *MailboxUpdateOne {
	muo.mutation.AddMessageIDs(ids...)
	return muo
}

// AddMessages adds the "messages" edges to the Message entity.
func (muo *MailboxUpdateOne) AddMessages(m ...*Message) *MailboxUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddMessageIDs(ids...)
}

// Mutation returns the MailboxMutation object of the builder.
func (muo *MailboxUpdateOne) Mutation() *MailboxMutation {
	return muo.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (muo *MailboxUpdateOne) ClearAccount() *MailboxUpdateOne {
	muo.mutation.ClearAccount()
	return muo
}

// ClearMessages clears all "messages" edges to the Message entity.
func (muo *MailboxUpdateOne) ClearMessages() *MailboxUpdateOne {
	muo.mutation.ClearMessages()
	return muo
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (muo *MailboxUpdateOne) RemoveMessageIDs(ids ...int) *MailboxUpdateOne {
	muo.mutation.RemoveMessageIDs(ids...)
	return muo
}

// RemoveMessages removes "messages" edges to Message entities.
func (muo *MailboxUpdateOne) RemoveMessages(m ...*Message) *MailboxUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveMessageIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MailboxUpdateOne) Select(field string, fields ...string) *MailboxUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Mailbox entity.
func (muo *MailboxUpdateOne) Save(ctx context.Context) (*Mailbox, error) {
	var (
		err  error
		node *Mailbox
	)
	if len(muo.hooks) == 0 {
		if err = muo.check(); err != nil {
			return nil, err
		}
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MailboxMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = muo.check(); err != nil {
				return nil, err
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			if muo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = muo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MailboxUpdateOne) SaveX(ctx context.Context) *Mailbox {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MailboxUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MailboxUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MailboxUpdateOne) check() error {
	if _, ok := muo.mutation.AccountID(); muo.mutation.AccountCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Mailbox.account"`)
	}
	return nil
}

func (muo *MailboxUpdateOne) sqlSave(ctx context.Context) (_node *Mailbox, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mailbox.Table,
			Columns: mailbox.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: mailbox.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Mailbox.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mailbox.FieldID)
		for _, f := range fields {
			if !mailbox.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mailbox.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mailbox.FieldName,
		})
	}
	if muo.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mailbox.AccountTable,
			Columns: []string{mailbox.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: account.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mailbox.AccountTable,
			Columns: []string{mailbox.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mailbox.MessagesTable,
			Columns: []string{mailbox.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !muo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mailbox.MessagesTable,
			Columns: []string{mailbox.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mailbox.MessagesTable,
			Columns: []string{mailbox.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Mailbox{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mailbox.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
