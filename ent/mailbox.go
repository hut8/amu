// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/hut8/amu/ent/account"
	"github.com/hut8/amu/ent/mailbox"
)

// Mailbox is the model entity for the Mailbox schema.
type Mailbox struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MailboxQuery when eager-loading is set.
	Edges             MailboxEdges `json:"edges"`
	account_mailboxes *int
}

// MailboxEdges holds the relations/edges for other nodes in the graph.
type MailboxEdges struct {
	// Account holds the value of the account edge.
	Account *Account `json:"account,omitempty"`
	// Messages holds the value of the messages edge.
	Messages []*Message `json:"messages,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AccountOrErr returns the Account value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MailboxEdges) AccountOrErr() (*Account, error) {
	if e.loadedTypes[0] {
		if e.Account == nil {
			// The edge account was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: account.Label}
		}
		return e.Account, nil
	}
	return nil, &NotLoadedError{edge: "account"}
}

// MessagesOrErr returns the Messages value or an error if the edge
// was not loaded in eager-loading.
func (e MailboxEdges) MessagesOrErr() ([]*Message, error) {
	if e.loadedTypes[1] {
		return e.Messages, nil
	}
	return nil, &NotLoadedError{edge: "messages"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Mailbox) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case mailbox.FieldID:
			values[i] = new(sql.NullInt64)
		case mailbox.FieldName:
			values[i] = new(sql.NullString)
		case mailbox.ForeignKeys[0]: // account_mailboxes
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Mailbox", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Mailbox fields.
func (m *Mailbox) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mailbox.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case mailbox.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				m.Name = value.String
			}
		case mailbox.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field account_mailboxes", value)
			} else if value.Valid {
				m.account_mailboxes = new(int)
				*m.account_mailboxes = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryAccount queries the "account" edge of the Mailbox entity.
func (m *Mailbox) QueryAccount() *AccountQuery {
	return (&MailboxClient{config: m.config}).QueryAccount(m)
}

// QueryMessages queries the "messages" edge of the Mailbox entity.
func (m *Mailbox) QueryMessages() *MessageQuery {
	return (&MailboxClient{config: m.config}).QueryMessages(m)
}

// Update returns a builder for updating this Mailbox.
// Note that you need to call Mailbox.Unwrap() before calling this method if this Mailbox
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Mailbox) Update() *MailboxUpdateOne {
	return (&MailboxClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Mailbox entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Mailbox) Unwrap() *Mailbox {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Mailbox is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Mailbox) String() string {
	var builder strings.Builder
	builder.WriteString("Mailbox(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", name=")
	builder.WriteString(m.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Mailboxes is a parsable slice of Mailbox.
type Mailboxes []*Mailbox

func (m Mailboxes) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
